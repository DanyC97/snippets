{
  "attributes": {
    "textposition": {
      "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.", 
      "dflt": "middle center", 
      "values": [
        "top left", 
        "top center", 
        "top right", 
        "middle left", 
        "middle center", 
        "middle right", 
        "bottom left", 
        "bottom center", 
        "bottom right"
      ], 
      "role": "style", 
      "valType": "enumerated", 
      "arrayOk": true
    }, 
    "uid": {
      "valType": "string", 
      "role": "info", 
      "dflt": ""
    }, 
    "stream": {
      "maxpoints": {
        "valType": "number", 
        "role": "info", 
        "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.", 
        "min": 0
      }, 
      "role": "object", 
      "token": {
        "strict": true, 
        "valType": "string", 
        "role": "info", 
        "description": "The stream id number links a data trace on a plot with a stream. See https://plot.ly/settings for more details.", 
        "noBlank": true
      }
    }, 
    "text": {
      "valType": "string", 
      "arrayOk": true, 
      "role": "info", 
      "description": "Sets text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates.", 
      "dflt": ""
    }, 
    "textfont": {
      "colorsrc": {
        "valType": "string", 
        "role": "info", 
        "description": "Sets the source reference on plot.ly for  color ."
      }, 
      "description": "Sets the text font.", 
      "family": {
        "strict": true, 
        "arrayOk": true, 
        "role": "style", 
        "valType": "string", 
        "noBlank": true
      }, 
      "color": {
        "arrayOk": true, 
        "role": "style", 
        "valType": "color"
      }, 
      "familysrc": {
        "valType": "string", 
        "role": "info", 
        "description": "Sets the source reference on plot.ly for  family ."
      }, 
      "role": "object", 
      "sizesrc": {
        "valType": "string", 
        "role": "info", 
        "description": "Sets the source reference on plot.ly for  size ."
      }, 
      "size": {
        "arrayOk": true, 
        "role": "style", 
        "valType": "number", 
        "min": 1
      }
    }, 
    "textsrc": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the source reference on plot.ly for  text ."
    }, 
    "visible": {
      "values": [
        true, 
        false, 
        "legendonly"
      ], 
      "valType": "enumerated", 
      "role": "info", 
      "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).", 
      "dflt": true
    }, 
    "marker": {
      "opacity": {
        "description": "Sets the marker opacity.", 
        "min": 0, 
        "max": 1, 
        "role": "style", 
        "valType": "number", 
        "arrayOk": true
      }, 
      "colorsrc": {
        "valType": "string", 
        "role": "info", 
        "description": "Sets the source reference on plot.ly for  color ."
      }, 
      "autocolorscale": {
        "valType": "boolean", 
        "role": "style", 
        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.", 
        "dflt": true
      }, 
      "sizeref": {
        "valType": "number", 
        "role": "style", 
        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.", 
        "dflt": 1
      }, 
      "cmin": {
        "valType": "number", 
        "role": "info", 
        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmax` must be set as well.", 
        "dflt": null
      }, 
      "colorscale": {
        "valType": "colorscale", 
        "role": "style", 
        "description": "Sets the colorscale and only has an effect if `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"
      }, 
      "color": {
        "valType": "color", 
        "arrayOk": true, 
        "role": "style", 
        "description": "Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."
      }, 
      "opacitysrc": {
        "valType": "string", 
        "role": "info", 
        "description": "Sets the source reference on plot.ly for  opacity ."
      }, 
      "symbol": {
        "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.", 
        "dflt": "circle", 
        "values": [
          0, 
          "circle", 
          100, 
          "circle-open", 
          200, 
          "circle-dot", 
          300, 
          "circle-open-dot", 
          1, 
          "square", 
          101, 
          "square-open", 
          201, 
          "square-dot", 
          301, 
          "square-open-dot", 
          2, 
          "diamond", 
          102, 
          "diamond-open", 
          202, 
          "diamond-dot", 
          302, 
          "diamond-open-dot", 
          3, 
          "cross", 
          103, 
          "cross-open", 
          203, 
          "cross-dot", 
          303, 
          "cross-open-dot", 
          4, 
          "x", 
          104, 
          "x-open", 
          204, 
          "x-dot", 
          304, 
          "x-open-dot", 
          5, 
          "triangle-up", 
          105, 
          "triangle-up-open", 
          205, 
          "triangle-up-dot", 
          305, 
          "triangle-up-open-dot", 
          6, 
          "triangle-down", 
          106, 
          "triangle-down-open", 
          206, 
          "triangle-down-dot", 
          306, 
          "triangle-down-open-dot", 
          7, 
          "triangle-left", 
          107, 
          "triangle-left-open", 
          207, 
          "triangle-left-dot", 
          307, 
          "triangle-left-open-dot", 
          8, 
          "triangle-right", 
          108, 
          "triangle-right-open", 
          208, 
          "triangle-right-dot", 
          308, 
          "triangle-right-open-dot", 
          9, 
          "triangle-ne", 
          109, 
          "triangle-ne-open", 
          209, 
          "triangle-ne-dot", 
          309, 
          "triangle-ne-open-dot", 
          10, 
          "triangle-se", 
          110, 
          "triangle-se-open", 
          210, 
          "triangle-se-dot", 
          310, 
          "triangle-se-open-dot", 
          11, 
          "triangle-sw", 
          111, 
          "triangle-sw-open", 
          211, 
          "triangle-sw-dot", 
          311, 
          "triangle-sw-open-dot", 
          12, 
          "triangle-nw", 
          112, 
          "triangle-nw-open", 
          212, 
          "triangle-nw-dot", 
          312, 
          "triangle-nw-open-dot", 
          13, 
          "pentagon", 
          113, 
          "pentagon-open", 
          213, 
          "pentagon-dot", 
          313, 
          "pentagon-open-dot", 
          14, 
          "hexagon", 
          114, 
          "hexagon-open", 
          214, 
          "hexagon-dot", 
          314, 
          "hexagon-open-dot", 
          15, 
          "hexagon2", 
          115, 
          "hexagon2-open", 
          215, 
          "hexagon2-dot", 
          315, 
          "hexagon2-open-dot", 
          16, 
          "octagon", 
          116, 
          "octagon-open", 
          216, 
          "octagon-dot", 
          316, 
          "octagon-open-dot", 
          17, 
          "star", 
          117, 
          "star-open", 
          217, 
          "star-dot", 
          317, 
          "star-open-dot", 
          18, 
          "hexagram", 
          118, 
          "hexagram-open", 
          218, 
          "hexagram-dot", 
          318, 
          "hexagram-open-dot", 
          19, 
          "star-triangle-up", 
          119, 
          "star-triangle-up-open", 
          219, 
          "star-triangle-up-dot", 
          319, 
          "star-triangle-up-open-dot", 
          20, 
          "star-triangle-down", 
          120, 
          "star-triangle-down-open", 
          220, 
          "star-triangle-down-dot", 
          320, 
          "star-triangle-down-open-dot", 
          21, 
          "star-square", 
          121, 
          "star-square-open", 
          221, 
          "star-square-dot", 
          321, 
          "star-square-open-dot", 
          22, 
          "star-diamond", 
          122, 
          "star-diamond-open", 
          222, 
          "star-diamond-dot", 
          322, 
          "star-diamond-open-dot", 
          23, 
          "diamond-tall", 
          123, 
          "diamond-tall-open", 
          223, 
          "diamond-tall-dot", 
          323, 
          "diamond-tall-open-dot", 
          24, 
          "diamond-wide", 
          124, 
          "diamond-wide-open", 
          224, 
          "diamond-wide-dot", 
          324, 
          "diamond-wide-open-dot", 
          25, 
          "hourglass", 
          125, 
          "hourglass-open", 
          26, 
          "bowtie", 
          126, 
          "bowtie-open", 
          27, 
          "circle-cross", 
          127, 
          "circle-cross-open", 
          28, 
          "circle-x", 
          128, 
          "circle-x-open", 
          29, 
          "square-cross", 
          129, 
          "square-cross-open", 
          30, 
          "square-x", 
          130, 
          "square-x-open", 
          31, 
          "diamond-cross", 
          131, 
          "diamond-cross-open", 
          32, 
          "diamond-x", 
          132, 
          "diamond-x-open", 
          33, 
          "cross-thin", 
          133, 
          "cross-thin-open", 
          34, 
          "x-thin", 
          134, 
          "x-thin-open", 
          35, 
          "asterisk", 
          135, 
          "asterisk-open", 
          36, 
          "hash", 
          136, 
          "hash-open", 
          236, 
          "hash-dot", 
          336, 
          "hash-open-dot", 
          37, 
          "y-up", 
          137, 
          "y-up-open", 
          38, 
          "y-down", 
          138, 
          "y-down-open", 
          39, 
          "y-left", 
          139, 
          "y-left-open", 
          40, 
          "y-right", 
          140, 
          "y-right-open", 
          41, 
          "line-ew", 
          141, 
          "line-ew-open", 
          42, 
          "line-ns", 
          142, 
          "line-ns-open", 
          43, 
          "line-ne", 
          143, 
          "line-ne-open", 
          44, 
          "line-nw", 
          144, 
          "line-nw-open"
        ], 
        "role": "style", 
        "valType": "enumerated", 
        "arrayOk": true
      }, 
      "reversescale": {
        "valType": "boolean", 
        "role": "style", 
        "description": "Has an effect only if `marker.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).", 
        "dflt": false
      }, 
      "symbolsrc": {
        "valType": "string", 
        "role": "info", 
        "description": "Sets the source reference on plot.ly for  symbol ."
      }, 
      "colorbar": {
        "yanchor": {
          "values": [
            "top", 
            "middle", 
            "bottom"
          ], 
          "valType": "enumerated", 
          "role": "style", 
          "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.", 
          "dflt": "middle"
        }, 
        "showexponent": {
          "values": [
            "all", 
            "first", 
            "last", 
            "none"
          ], 
          "valType": "enumerated", 
          "role": "style", 
          "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.", 
          "dflt": "all"
        }, 
        "showticklabels": {
          "valType": "boolean", 
          "role": "style", 
          "description": "Determines whether or not the tick labels are drawn.", 
          "dflt": true
        }, 
        "lenmode": {
          "values": [
            "fraction", 
            "pixels"
          ], 
          "valType": "enumerated", 
          "role": "info", 
          "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.", 
          "dflt": "fraction"
        }, 
        "showticksuffix": {
          "values": [
            "all", 
            "first", 
            "last", 
            "none"
          ], 
          "valType": "enumerated", 
          "role": "style", 
          "description": "Same as `showtickprefix` but for tick suffixes.", 
          "dflt": "all"
        }, 
        "titlefont": {
          "color": {
            "valType": "color", 
            "role": "style"
          }, 
          "role": "object", 
          "description": "Sets this color bar's title font.", 
          "family": {
            "strict": true, 
            "valType": "string", 
            "role": "style", 
            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.", 
            "noBlank": true
          }, 
          "size": {
            "valType": "number", 
            "role": "style", 
            "min": 1
          }
        }, 
        "borderwidth": {
          "valType": "number", 
          "role": "style", 
          "description": "Sets the width (in px) or the border enclosing this color bar.", 
          "dflt": 0, 
          "min": 0
        }, 
        "tickvalssrc": {
          "valType": "string", 
          "role": "info", 
          "description": "Sets the source reference on plot.ly for  tickvals ."
        }, 
        "showtickprefix": {
          "values": [
            "all", 
            "first", 
            "last", 
            "none"
          ], 
          "valType": "enumerated", 
          "role": "style", 
          "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.", 
          "dflt": "all"
        }, 
        "nticks": {
          "valType": "integer", 
          "role": "style", 
          "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.", 
          "dflt": 0, 
          "min": 0
        }, 
        "titleside": {
          "values": [
            "right", 
            "top", 
            "bottom"
          ], 
          "valType": "enumerated", 
          "role": "style", 
          "description": "Determines the location of the colorbar title with respect to the color bar.", 
          "dflt": "top"
        }, 
        "outlinecolor": {
          "valType": "color", 
          "role": "style", 
          "description": "Sets the axis line color.", 
          "dflt": "#444"
        }, 
        "tickprefix": {
          "valType": "string", 
          "role": "style", 
          "description": "Sets a tick label prefix.", 
          "dflt": ""
        }, 
        "tickformat": {
          "valType": "string", 
          "role": "style", 
          "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.", 
          "dflt": ""
        }, 
        "tickmode": {
          "values": [
            "auto", 
            "linear", 
            "array"
          ], 
          "valType": "enumerated", 
          "role": "info", 
          "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
        }, 
        "title": {
          "valType": "string", 
          "role": "info", 
          "description": "Sets the title of the color bar.", 
          "dflt": "Click to enter colorscale title"
        }, 
        "ticks": {
          "values": [
            "outside", 
            "inside", 
            ""
          ], 
          "valType": "enumerated", 
          "role": "style", 
          "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.", 
          "dflt": ""
        }, 
        "thickness": {
          "valType": "number", 
          "role": "style", 
          "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.", 
          "dflt": 30, 
          "min": 0
        }, 
        "bgcolor": {
          "valType": "color", 
          "role": "style", 
          "description": "Sets the color of padded area.", 
          "dflt": "rgba(0,0,0,0)"
        }, 
        "role": "object", 
        "outlinewidth": {
          "valType": "number", 
          "role": "style", 
          "description": "Sets the width (in px) of the axis line.", 
          "dflt": 1, 
          "min": 0
        }, 
        "ticktextsrc": {
          "valType": "string", 
          "role": "info", 
          "description": "Sets the source reference on plot.ly for  ticktext ."
        }, 
        "bordercolor": {
          "valType": "color", 
          "role": "style", 
          "description": "Sets the axis line color.", 
          "dflt": "#444"
        }, 
        "xanchor": {
          "values": [
            "left", 
            "center", 
            "right"
          ], 
          "valType": "enumerated", 
          "role": "style", 
          "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.", 
          "dflt": "left"
        }, 
        "ticklen": {
          "valType": "number", 
          "role": "style", 
          "description": "Sets the tick length (in px).", 
          "dflt": 5, 
          "min": 0
        }, 
        "len": {
          "valType": "number", 
          "role": "style", 
          "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.", 
          "dflt": 1, 
          "min": 0
        }, 
        "ticksuffix": {
          "valType": "string", 
          "role": "style", 
          "description": "Sets a tick label suffix.", 
          "dflt": ""
        }, 
        "x": {
          "description": "Sets the x position of the color bar (in plot fraction).", 
          "dflt": 1.02, 
          "min": -2, 
          "max": 3, 
          "role": "style", 
          "valType": "number"
        }, 
        "ticktext": {
          "valType": "data_array", 
          "role": "data", 
          "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."
        }, 
        "xpad": {
          "valType": "number", 
          "role": "style", 
          "description": "Sets the amount of padding (in px) along the x direction.", 
          "dflt": 10, 
          "min": 0
        }, 
        "tickvals": {
          "valType": "data_array", 
          "role": "data", 
          "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
        }, 
        "tickfont": {
          "color": {
            "valType": "color", 
            "role": "style"
          }, 
          "role": "object", 
          "description": "Sets the tick font.", 
          "family": {
            "strict": true, 
            "valType": "string", 
            "role": "style", 
            "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.", 
            "noBlank": true
          }, 
          "size": {
            "valType": "number", 
            "role": "style", 
            "min": 1
          }
        }, 
        "tickwidth": {
          "valType": "number", 
          "role": "style", 
          "description": "Sets the tick width (in px).", 
          "dflt": 1, 
          "min": 0
        }, 
        "tick0": {
          "valType": "number", 
          "role": "style", 
          "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.", 
          "dflt": 0
        }, 
        "tickangle": {
          "valType": "angle", 
          "role": "style", 
          "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.", 
          "dflt": "auto"
        }, 
        "dtick": {
          "valType": "any", 
          "role": "style", 
          "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.", 
          "dflt": 1
        }, 
        "ypad": {
          "valType": "number", 
          "role": "style", 
          "description": "Sets the amount of padding (in px) along the y direction.", 
          "dflt": 10, 
          "min": 0
        }, 
        "exponentformat": {
          "values": [
            "none", 
            "e", 
            "E", 
            "power", 
            "SI", 
            "B"
          ], 
          "valType": "enumerated", 
          "role": "style", 
          "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.", 
          "dflt": "B"
        }, 
        "y": {
          "description": "Sets the y position of the color bar (in plot fraction).", 
          "dflt": 0.5, 
          "min": -2, 
          "max": 3, 
          "role": "style", 
          "valType": "number"
        }, 
        "tickcolor": {
          "valType": "color", 
          "role": "style", 
          "description": "Sets the tick color.", 
          "dflt": "#444"
        }, 
        "thicknessmode": {
          "values": [
            "fraction", 
            "pixels"
          ], 
          "valType": "enumerated", 
          "role": "style", 
          "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.", 
          "dflt": "pixels"
        }
      }, 
      "sizemode": {
        "values": [
          "diameter", 
          "area"
        ], 
        "valType": "enumerated", 
        "role": "info", 
        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.", 
        "dflt": "diameter"
      }, 
      "cauto": {
        "valType": "boolean", 
        "role": "info", 
        "description": "Has an effect only if `marker.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.", 
        "dflt": true
      }, 
      "role": "object", 
      "showscale": {
        "valType": "boolean", 
        "role": "info", 
        "description": "Has an effect only if `marker.color` is set to a numerical array. Determines whether or not a colorbar is displayed.", 
        "dflt": false
      }, 
      "sizesrc": {
        "valType": "string", 
        "role": "info", 
        "description": "Sets the source reference on plot.ly for  size ."
      }, 
      "line": {
        "colorsrc": {
          "valType": "string", 
          "role": "info", 
          "description": "Sets the source reference on plot.ly for  color ."
        }, 
        "autocolorscale": {
          "valType": "boolean", 
          "role": "style", 
          "description": "Has an effect only if `marker.line.color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.", 
          "dflt": true
        }, 
        "cmin": {
          "valType": "number", 
          "role": "info", 
          "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmax` must be set as well.", 
          "dflt": null
        }, 
        "colorscale": {
          "valType": "colorscale", 
          "role": "style", 
          "description": "Sets the colorscale and only has an effect if `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis"
        }, 
        "color": {
          "valType": "color", 
          "arrayOk": true, 
          "role": "style", 
          "description": "Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set."
        }, 
        "reversescale": {
          "valType": "boolean", 
          "role": "style", 
          "description": "Has an effect only if `marker.line.color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).", 
          "dflt": false
        }, 
        "width": {
          "valType": "number", 
          "arrayOk": true, 
          "role": "style", 
          "description": "Sets the width (in px) of the lines bounding the marker points.", 
          "min": 0
        }, 
        "cauto": {
          "valType": "boolean", 
          "role": "info", 
          "description": "Has an effect only if `marker.line.color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.", 
          "dflt": true
        }, 
        "role": "object", 
        "widthsrc": {
          "valType": "string", 
          "role": "info", 
          "description": "Sets the source reference on plot.ly for  width ."
        }, 
        "cmax": {
          "valType": "number", 
          "role": "info", 
          "description": "Has an effect only if `marker.line.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.line.color` array index, and if set, `marker.line.cmin` must be set as well.", 
          "dflt": null
        }
      }, 
      "cmax": {
        "valType": "number", 
        "role": "info", 
        "description": "Has an effect only if `marker.color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `marker.color` array index, and if set, `marker.cmin` must be set as well.", 
        "dflt": null
      }, 
      "sizemin": {
        "valType": "number", 
        "role": "style", 
        "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.", 
        "dflt": 0, 
        "min": 0
      }, 
      "size": {
        "description": "Sets the marker size (in px).", 
        "dflt": 6, 
        "min": 0, 
        "role": "style", 
        "valType": "number", 
        "arrayOk": true
      }
    }, 
    "showlegend": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Determines whether or not an item corresponding to this trace is shown in the legend.", 
      "dflt": true
    }, 
    "lon": {
      "valType": "data_array", 
      "role": "data", 
      "description": "Sets the longitude coordinates (in degrees East)."
    }, 
    "type": "scattergeo", 
    "lonsrc": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the source reference on plot.ly for  lon ."
    }, 
    "opacity": {
      "description": "Sets the opacity of the trace.", 
      "dflt": 1, 
      "min": 0, 
      "max": 1, 
      "role": "style", 
      "valType": "number"
    }, 
    "locationssrc": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the source reference on plot.ly for  locations ."
    }, 
    "legendgroup": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.", 
      "dflt": ""
    }, 
    "textpositionsrc": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the source reference on plot.ly for  textposition ."
    }, 
    "locations": {
      "valType": "data_array", 
      "role": "data", 
      "description": "Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info."
    }, 
    "hoverinfo": {
      "description": "Determines which trace information appear on hover.", 
      "dflt": "all", 
      "extras": [
        "all", 
        "none"
      ], 
      "role": "info", 
      "flags": [
        "lon", 
        "lat", 
        "location", 
        "text", 
        "name"
      ], 
      "valType": "flaglist"
    }, 
    "lat": {
      "valType": "data_array", 
      "role": "data", 
      "description": "Sets the latitude coordinates (in degrees North)."
    }, 
    "latsrc": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the source reference on plot.ly for  lat ."
    }, 
    "line": {
      "color": {
        "valType": "color", 
        "role": "style", 
        "description": "Sets the line color."
      }, 
      "dash": {
        "values": [
          "solid", 
          "dot", 
          "dash", 
          "longdash", 
          "dashdot", 
          "longdashdot"
        ], 
        "valType": "string", 
        "role": "style", 
        "description": "Sets the style of the lines. Set to a dash string type or a dash length in px.", 
        "dflt": "solid"
      }, 
      "role": "object", 
      "width": {
        "valType": "number", 
        "role": "style", 
        "description": "Sets the line width (in px).", 
        "dflt": 2, 
        "min": 0
      }
    }, 
    "geo": {
      "valType": "subplotid", 
      "role": "info", 
      "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.", 
      "dflt": "geo"
    }, 
    "name": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the trace name. The trace name appear as the legend item and on hover."
    }, 
    "mode": {
      "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points, then the default is *lines+markers*. Otherwise, *lines*.", 
      "dflt": "markers", 
      "extras": [
        "none"
      ], 
      "role": "info", 
      "flags": [
        "lines", 
        "markers", 
        "text"
      ], 
      "valType": "flaglist"
    }, 
    "locationmode": {
      "values": [
        "ISO-3", 
        "USA-states", 
        "country names"
      ], 
      "valType": "enumerated", 
      "role": "info", 
      "description": "Determines the set of locations used to match entries in `locations` to regions on the map.", 
      "dflt": "ISO-3"
    }
  }, 
  "description": "The data visualized as scatter point or lines on a geographic map is provided either by longitude/latitude pairs in `lon` and `lat` respectively or by geographic location IDs or names in `locations`.", 
  "hrName": "scatter_geo"
}