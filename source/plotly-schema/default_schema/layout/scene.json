{
  "_isSubplotObj": true, 
  "domain": {
    "y": {
      "items": [
        {
          "max": 1, 
          "valType": "number", 
          "min": 0
        }, 
        {
          "max": 1, 
          "valType": "number", 
          "min": 0
        }
      ], 
      "valType": "info_array", 
      "role": "info", 
      "description": "Sets the vertical domain of this scene (in plot fraction).", 
      "dflt": [
        0, 
        1
      ]
    }, 
    "x": {
      "items": [
        {
          "max": 1, 
          "valType": "number", 
          "min": 0
        }, 
        {
          "max": 1, 
          "valType": "number", 
          "min": 0
        }
      ], 
      "valType": "info_array", 
      "role": "info", 
      "description": "Sets the horizontal domain of this scene (in plot fraction).", 
      "dflt": [
        0, 
        1
      ]
    }, 
    "role": "object"
  }, 
  "dragmode": {
    "values": [
      "orbit", 
      "turntable", 
      "zoom", 
      "pan"
    ], 
    "valType": "enumerated", 
    "role": "info", 
    "description": "Determines the mode of drag interactions for this scene.", 
    "dflt": "turntable"
  }, 
  "yaxis": {
    "showexponent": {
      "values": [
        "all", 
        "first", 
        "last", 
        "none"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.", 
      "dflt": "all"
    }, 
    "showticklabels": {
      "valType": "boolean", 
      "role": "style", 
      "description": "Determines whether or not the tick labels are drawn.", 
      "dflt": true
    }, 
    "ticksuffix": {
      "valType": "string", 
      "role": "style", 
      "description": "Sets a tick label suffix.", 
      "dflt": ""
    }, 
    "color": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.", 
      "dflt": "#444"
    }, 
    "categoryarray": {
      "valType": "data_array", 
      "role": "data", 
      "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`."
    }, 
    "showticksuffix": {
      "values": [
        "all", 
        "first", 
        "last", 
        "none"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "Same as `showtickprefix` but for tick suffixes.", 
      "dflt": "all"
    }, 
    "showbackground": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Sets whether or not this axis' wall has a background color.", 
      "dflt": false
    }, 
    "gridcolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the color of the grid lines.", 
      "dflt": "rgb(204, 204, 204)"
    }, 
    "linecolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the axis line color.", 
      "dflt": "#444"
    }, 
    "mirror": {
      "values": [
        true, 
        "ticks", 
        false, 
        "all", 
        "allticks"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.", 
      "dflt": false
    }, 
    "tickvalssrc": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the source reference on plot.ly for  tickvals ."
    }, 
    "nticks": {
      "valType": "integer", 
      "role": "style", 
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.", 
      "dflt": 0, 
      "min": 0
    }, 
    "linewidth": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the width (in px) of the axis line.", 
      "dflt": 1, 
      "min": 0
    }, 
    "autorange": {
      "values": [
        true, 
        false, 
        "reversed"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.", 
      "dflt": true
    }, 
    "ticktextsrc": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the source reference on plot.ly for  ticktext ."
    }, 
    "showspikes": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover.", 
      "dflt": true
    }, 
    "tickprefix": {
      "valType": "string", 
      "role": "style", 
      "description": "Sets a tick label prefix.", 
      "dflt": ""
    }, 
    "tickformat": {
      "valType": "string", 
      "role": "style", 
      "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.", 
      "dflt": ""
    }, 
    "tickmode": {
      "values": [
        "auto", 
        "linear", 
        "array"
      ], 
      "valType": "enumerated", 
      "role": "info", 
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
    }, 
    "title": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the title of this axis."
    }, 
    "spikecolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the color of the spikes.", 
      "dflt": "#444"
    }, 
    "ticks": {
      "values": [
        "outside", 
        "inside", 
        ""
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
    }, 
    "spikesides": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.", 
      "dflt": true
    }, 
    "spikethickness": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the thickness (in px) of the spikes.", 
      "dflt": 2, 
      "min": 0
    }, 
    "rangemode": {
      "values": [
        "normal", 
        "tozero", 
        "nonnegative"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.", 
      "dflt": "normal"
    }, 
    "showtickprefix": {
      "values": [
        "all", 
        "first", 
        "last", 
        "none"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.", 
      "dflt": "all"
    }, 
    "role": "object", 
    "zeroline": {
      "valType": "boolean", 
      "role": "style", 
      "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."
    }, 
    "type": {
      "values": [
        "-", 
        "linear", 
        "log", 
        "date", 
        "category"
      ], 
      "valType": "enumerated", 
      "role": "info", 
      "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.", 
      "dflt": "-"
    }, 
    "zerolinewidth": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the width (in px) of the zero line.", 
      "dflt": 1
    }, 
    "ticklen": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the tick length (in px).", 
      "dflt": 5, 
      "min": 0
    }, 
    "categoryorder": {
      "values": [
        "trace", 
        "category ascending", 
        "category descending", 
        "array"
      ], 
      "valType": "enumerated", 
      "role": "info", 
      "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.", 
      "dflt": "trace"
    }, 
    "titlefont": {
      "color": {
        "valType": "color", 
        "role": "style"
      }, 
      "role": "object", 
      "description": "Sets this axis' title font.", 
      "family": {
        "strict": true, 
        "valType": "string", 
        "role": "style", 
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.", 
        "noBlank": true
      }, 
      "size": {
        "valType": "number", 
        "role": "style", 
        "min": 1
      }
    }, 
    "hoverformat": {
      "valType": "string", 
      "role": "style", 
      "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.", 
      "dflt": ""
    }, 
    "backgroundcolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the background color of this axis' wall.", 
      "dflt": "rgba(204, 204, 204, 0.5)"
    }, 
    "fixedrange": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.", 
      "dflt": false
    }, 
    "showline": {
      "valType": "boolean", 
      "role": "style", 
      "description": "Determines whether or not a line bounding this axis is drawn.", 
      "dflt": false
    }, 
    "ticktext": {
      "valType": "data_array", 
      "role": "data", 
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."
    }, 
    "showgrid": {
      "valType": "boolean", 
      "role": "style", 
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."
    }, 
    "tickvals": {
      "valType": "data_array", 
      "role": "data", 
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
    }, 
    "tickfont": {
      "color": {
        "valType": "color", 
        "role": "style"
      }, 
      "role": "object", 
      "description": "Sets the tick font.", 
      "family": {
        "strict": true, 
        "valType": "string", 
        "role": "style", 
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.", 
        "noBlank": true
      }, 
      "size": {
        "valType": "number", 
        "role": "style", 
        "min": 1
      }
    }, 
    "tickwidth": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the tick width (in px).", 
      "dflt": 1, 
      "min": 0
    }, 
    "tick0": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.", 
      "dflt": 0
    }, 
    "tickangle": {
      "valType": "angle", 
      "role": "style", 
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.", 
      "dflt": "auto"
    }, 
    "gridwidth": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the width (in px) of the grid lines.", 
      "dflt": 1, 
      "min": 0
    }, 
    "dtick": {
      "valType": "any", 
      "role": "style", 
      "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.", 
      "dflt": 1
    }, 
    "showaxeslabels": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Sets whether or not this axis is labeled", 
      "dflt": true
    }, 
    "zerolinecolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the line color of the zero line.", 
      "dflt": "#444"
    }, 
    "range": {
      "items": [
        {
          "valType": "number"
        }, 
        {
          "valType": "number"
        }
      ], 
      "valType": "info_array", 
      "role": "info", 
      "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the date range from January 1st 1970 to November 4th, 2013, set the range from 0 to 1380844800000.0"
    }, 
    "categoryarraysrc": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the source reference on plot.ly for  categoryarray ."
    }, 
    "tickcolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the tick color.", 
      "dflt": "#444"
    }, 
    "exponentformat": {
      "values": [
        "none", 
        "e", 
        "E", 
        "power", 
        "SI", 
        "B"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.", 
      "dflt": "B"
    }
  }, 
  "aspectmode": {
    "values": [
      "auto", 
      "cube", 
      "data", 
      "manual"
    ], 
    "valType": "enumerated", 
    "role": "info", 
    "description": "If *cube*, this scene's axes are drawn as a cube, regardless of the axes' ranges. If *data*, this scene's axes are drawn in proportion with the axes' ranges. If *manual*, this scene's axes are drawn in proportion with the input of *aspectratio* (the default behavior if *aspectratio* is provided). If *auto*, this scene's axes are drawn using the results of *data* except when one axis is more than four times the size of the two others, where in that case the results of *cube* are used.", 
    "dflt": "auto"
  }, 
  "bgcolor": {
    "valType": "color", 
    "role": "style", 
    "dflt": "rgba(0,0,0,0)"
  }, 
  "camera": {
    "role": "object", 
    "eye": {
      "y": {
        "valType": "number", 
        "role": "info", 
        "dflt": 1.25
      }, 
      "x": {
        "valType": "number", 
        "role": "info", 
        "dflt": 1.25
      }, 
      "z": {
        "valType": "number", 
        "role": "info", 
        "dflt": 1.25
      }, 
      "role": "object", 
      "description": "Sets the (x,y,z) components of the 'eye' camera vector. This vector determines the view point about the origin of this scene."
    }, 
    "center": {
      "y": {
        "valType": "number", 
        "role": "info", 
        "dflt": 0
      }, 
      "x": {
        "valType": "number", 
        "role": "info", 
        "dflt": 0
      }, 
      "z": {
        "valType": "number", 
        "role": "info", 
        "dflt": 0
      }, 
      "role": "object", 
      "description": "Sets the (x,y,z) components of the 'center' camera vector This vector determines the translation (x,y,z) space about the center of this scene. By default, there is no such translation."
    }, 
    "up": {
      "y": {
        "valType": "number", 
        "role": "info", 
        "dflt": 0
      }, 
      "x": {
        "valType": "number", 
        "role": "info", 
        "dflt": 0
      }, 
      "z": {
        "valType": "number", 
        "role": "info", 
        "dflt": 1
      }, 
      "role": "object", 
      "description": "Sets the (x,y,z) components of the 'up' camera vector. This vector determines the up direction of this scene with respect to the page. The default is *{x: 0, y: 0, z: 1}* which means that the z axis points up."
    }
  }, 
  "role": "object", 
  "xaxis": {
    "showexponent": {
      "values": [
        "all", 
        "first", 
        "last", 
        "none"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.", 
      "dflt": "all"
    }, 
    "showticklabels": {
      "valType": "boolean", 
      "role": "style", 
      "description": "Determines whether or not the tick labels are drawn.", 
      "dflt": true
    }, 
    "ticksuffix": {
      "valType": "string", 
      "role": "style", 
      "description": "Sets a tick label suffix.", 
      "dflt": ""
    }, 
    "color": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.", 
      "dflt": "#444"
    }, 
    "categoryarray": {
      "valType": "data_array", 
      "role": "data", 
      "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`."
    }, 
    "showticksuffix": {
      "values": [
        "all", 
        "first", 
        "last", 
        "none"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "Same as `showtickprefix` but for tick suffixes.", 
      "dflt": "all"
    }, 
    "showbackground": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Sets whether or not this axis' wall has a background color.", 
      "dflt": false
    }, 
    "gridcolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the color of the grid lines.", 
      "dflt": "rgb(204, 204, 204)"
    }, 
    "linecolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the axis line color.", 
      "dflt": "#444"
    }, 
    "mirror": {
      "values": [
        true, 
        "ticks", 
        false, 
        "all", 
        "allticks"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.", 
      "dflt": false
    }, 
    "tickvalssrc": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the source reference on plot.ly for  tickvals ."
    }, 
    "nticks": {
      "valType": "integer", 
      "role": "style", 
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.", 
      "dflt": 0, 
      "min": 0
    }, 
    "linewidth": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the width (in px) of the axis line.", 
      "dflt": 1, 
      "min": 0
    }, 
    "autorange": {
      "values": [
        true, 
        false, 
        "reversed"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.", 
      "dflt": true
    }, 
    "ticktextsrc": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the source reference on plot.ly for  ticktext ."
    }, 
    "showspikes": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover.", 
      "dflt": true
    }, 
    "tickprefix": {
      "valType": "string", 
      "role": "style", 
      "description": "Sets a tick label prefix.", 
      "dflt": ""
    }, 
    "tickformat": {
      "valType": "string", 
      "role": "style", 
      "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.", 
      "dflt": ""
    }, 
    "tickmode": {
      "values": [
        "auto", 
        "linear", 
        "array"
      ], 
      "valType": "enumerated", 
      "role": "info", 
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
    }, 
    "title": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the title of this axis."
    }, 
    "spikecolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the color of the spikes.", 
      "dflt": "#444"
    }, 
    "ticks": {
      "values": [
        "outside", 
        "inside", 
        ""
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
    }, 
    "spikesides": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.", 
      "dflt": true
    }, 
    "spikethickness": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the thickness (in px) of the spikes.", 
      "dflt": 2, 
      "min": 0
    }, 
    "rangemode": {
      "values": [
        "normal", 
        "tozero", 
        "nonnegative"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.", 
      "dflt": "normal"
    }, 
    "showtickprefix": {
      "values": [
        "all", 
        "first", 
        "last", 
        "none"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.", 
      "dflt": "all"
    }, 
    "role": "object", 
    "zeroline": {
      "valType": "boolean", 
      "role": "style", 
      "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."
    }, 
    "type": {
      "values": [
        "-", 
        "linear", 
        "log", 
        "date", 
        "category"
      ], 
      "valType": "enumerated", 
      "role": "info", 
      "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.", 
      "dflt": "-"
    }, 
    "zerolinewidth": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the width (in px) of the zero line.", 
      "dflt": 1
    }, 
    "ticklen": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the tick length (in px).", 
      "dflt": 5, 
      "min": 0
    }, 
    "categoryorder": {
      "values": [
        "trace", 
        "category ascending", 
        "category descending", 
        "array"
      ], 
      "valType": "enumerated", 
      "role": "info", 
      "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.", 
      "dflt": "trace"
    }, 
    "titlefont": {
      "color": {
        "valType": "color", 
        "role": "style"
      }, 
      "role": "object", 
      "description": "Sets this axis' title font.", 
      "family": {
        "strict": true, 
        "valType": "string", 
        "role": "style", 
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.", 
        "noBlank": true
      }, 
      "size": {
        "valType": "number", 
        "role": "style", 
        "min": 1
      }
    }, 
    "hoverformat": {
      "valType": "string", 
      "role": "style", 
      "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.", 
      "dflt": ""
    }, 
    "backgroundcolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the background color of this axis' wall.", 
      "dflt": "rgba(204, 204, 204, 0.5)"
    }, 
    "fixedrange": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.", 
      "dflt": false
    }, 
    "showline": {
      "valType": "boolean", 
      "role": "style", 
      "description": "Determines whether or not a line bounding this axis is drawn.", 
      "dflt": false
    }, 
    "ticktext": {
      "valType": "data_array", 
      "role": "data", 
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."
    }, 
    "showgrid": {
      "valType": "boolean", 
      "role": "style", 
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."
    }, 
    "tickvals": {
      "valType": "data_array", 
      "role": "data", 
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
    }, 
    "tickfont": {
      "color": {
        "valType": "color", 
        "role": "style"
      }, 
      "role": "object", 
      "description": "Sets the tick font.", 
      "family": {
        "strict": true, 
        "valType": "string", 
        "role": "style", 
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.", 
        "noBlank": true
      }, 
      "size": {
        "valType": "number", 
        "role": "style", 
        "min": 1
      }
    }, 
    "tickwidth": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the tick width (in px).", 
      "dflt": 1, 
      "min": 0
    }, 
    "tick0": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.", 
      "dflt": 0
    }, 
    "tickangle": {
      "valType": "angle", 
      "role": "style", 
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.", 
      "dflt": "auto"
    }, 
    "gridwidth": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the width (in px) of the grid lines.", 
      "dflt": 1, 
      "min": 0
    }, 
    "dtick": {
      "valType": "any", 
      "role": "style", 
      "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.", 
      "dflt": 1
    }, 
    "showaxeslabels": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Sets whether or not this axis is labeled", 
      "dflt": true
    }, 
    "zerolinecolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the line color of the zero line.", 
      "dflt": "#444"
    }, 
    "range": {
      "items": [
        {
          "valType": "number"
        }, 
        {
          "valType": "number"
        }
      ], 
      "valType": "info_array", 
      "role": "info", 
      "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the date range from January 1st 1970 to November 4th, 2013, set the range from 0 to 1380844800000.0"
    }, 
    "categoryarraysrc": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the source reference on plot.ly for  categoryarray ."
    }, 
    "tickcolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the tick color.", 
      "dflt": "#444"
    }, 
    "exponentformat": {
      "values": [
        "none", 
        "e", 
        "E", 
        "power", 
        "SI", 
        "B"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.", 
      "dflt": "B"
    }
  }, 
  "zaxis": {
    "showexponent": {
      "values": [
        "all", 
        "first", 
        "last", 
        "none"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.", 
      "dflt": "all"
    }, 
    "showticklabels": {
      "valType": "boolean", 
      "role": "style", 
      "description": "Determines whether or not the tick labels are drawn.", 
      "dflt": true
    }, 
    "ticksuffix": {
      "valType": "string", 
      "role": "style", 
      "description": "Sets a tick label suffix.", 
      "dflt": ""
    }, 
    "color": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.", 
      "dflt": "#444"
    }, 
    "categoryarray": {
      "valType": "data_array", 
      "role": "data", 
      "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`."
    }, 
    "showticksuffix": {
      "values": [
        "all", 
        "first", 
        "last", 
        "none"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "Same as `showtickprefix` but for tick suffixes.", 
      "dflt": "all"
    }, 
    "showbackground": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Sets whether or not this axis' wall has a background color.", 
      "dflt": false
    }, 
    "gridcolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the color of the grid lines.", 
      "dflt": "rgb(204, 204, 204)"
    }, 
    "linecolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the axis line color.", 
      "dflt": "#444"
    }, 
    "mirror": {
      "values": [
        true, 
        "ticks", 
        false, 
        "all", 
        "allticks"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.", 
      "dflt": false
    }, 
    "tickvalssrc": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the source reference on plot.ly for  tickvals ."
    }, 
    "nticks": {
      "valType": "integer", 
      "role": "style", 
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.", 
      "dflt": 0, 
      "min": 0
    }, 
    "linewidth": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the width (in px) of the axis line.", 
      "dflt": 1, 
      "min": 0
    }, 
    "autorange": {
      "values": [
        true, 
        false, 
        "reversed"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.", 
      "dflt": true
    }, 
    "ticktextsrc": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the source reference on plot.ly for  ticktext ."
    }, 
    "showspikes": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover.", 
      "dflt": true
    }, 
    "tickprefix": {
      "valType": "string", 
      "role": "style", 
      "description": "Sets a tick label prefix.", 
      "dflt": ""
    }, 
    "tickformat": {
      "valType": "string", 
      "role": "style", 
      "description": "Sets the tick label formatting rule using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.", 
      "dflt": ""
    }, 
    "tickmode": {
      "values": [
        "auto", 
        "linear", 
        "array"
      ], 
      "valType": "enumerated", 
      "role": "info", 
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided)."
    }, 
    "title": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the title of this axis."
    }, 
    "spikecolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the color of the spikes.", 
      "dflt": "#444"
    }, 
    "ticks": {
      "values": [
        "outside", 
        "inside", 
        ""
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines."
    }, 
    "spikesides": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.", 
      "dflt": true
    }, 
    "spikethickness": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the thickness (in px) of the spikes.", 
      "dflt": 2, 
      "min": 0
    }, 
    "rangemode": {
      "values": [
        "normal", 
        "tozero", 
        "nonnegative"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.", 
      "dflt": "normal"
    }, 
    "showtickprefix": {
      "values": [
        "all", 
        "first", 
        "last", 
        "none"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.", 
      "dflt": "all"
    }, 
    "role": "object", 
    "zeroline": {
      "valType": "boolean", 
      "role": "style", 
      "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines."
    }, 
    "type": {
      "values": [
        "-", 
        "linear", 
        "log", 
        "date", 
        "category"
      ], 
      "valType": "enumerated", 
      "role": "info", 
      "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.", 
      "dflt": "-"
    }, 
    "zerolinewidth": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the width (in px) of the zero line.", 
      "dflt": 1
    }, 
    "ticklen": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the tick length (in px).", 
      "dflt": 5, 
      "min": 0
    }, 
    "categoryorder": {
      "values": [
        "trace", 
        "category ascending", 
        "category descending", 
        "array"
      ], 
      "valType": "enumerated", 
      "role": "info", 
      "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.", 
      "dflt": "trace"
    }, 
    "titlefont": {
      "color": {
        "valType": "color", 
        "role": "style"
      }, 
      "role": "object", 
      "description": "Sets this axis' title font.", 
      "family": {
        "strict": true, 
        "valType": "string", 
        "role": "style", 
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.", 
        "noBlank": true
      }, 
      "size": {
        "valType": "number", 
        "role": "style", 
        "min": 1
      }
    }, 
    "hoverformat": {
      "valType": "string", 
      "role": "style", 
      "description": "Sets the hover text formatting rule for data values on this axis, using the python/d3 number formatting language. See https://github.com/mbostock/d3/wiki/Formatting#numbers or https://docs.python.org/release/3.1.3/library/string.html#formatspec for more info.", 
      "dflt": ""
    }, 
    "backgroundcolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the background color of this axis' wall.", 
      "dflt": "rgba(204, 204, 204, 0.5)"
    }, 
    "fixedrange": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.", 
      "dflt": false
    }, 
    "showline": {
      "valType": "boolean", 
      "role": "style", 
      "description": "Determines whether or not a line bounding this axis is drawn.", 
      "dflt": false
    }, 
    "ticktext": {
      "valType": "data_array", 
      "role": "data", 
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`."
    }, 
    "showgrid": {
      "valType": "boolean", 
      "role": "style", 
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark."
    }, 
    "tickvals": {
      "valType": "data_array", 
      "role": "data", 
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`."
    }, 
    "tickfont": {
      "color": {
        "valType": "color", 
        "role": "style"
      }, 
      "role": "object", 
      "description": "Sets the tick font.", 
      "family": {
        "strict": true, 
        "valType": "string", 
        "role": "style", 
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The plotly service (at https://plot.ly or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.", 
        "noBlank": true
      }, 
      "size": {
        "valType": "number", 
        "role": "style", 
        "min": 1
      }
    }, 
    "tickwidth": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the tick width (in px).", 
      "dflt": 1, 
      "min": 0
    }, 
    "tick0": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the starting tick to November 4th, 2013, set the range to 1380844800000.0.", 
      "dflt": 0
    }, 
    "tickangle": {
      "valType": "angle", 
      "role": "style", 
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.", 
      "dflt": "auto"
    }, 
    "gridwidth": {
      "valType": "number", 
      "role": "style", 
      "description": "Sets the width (in px) of the grid lines.", 
      "dflt": 1, 
      "min": 0
    }, 
    "dtick": {
      "valType": "any", 
      "role": "style", 
      "description": "Sets the step in-between ticks on this axis Use with `tick0`. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0.", 
      "dflt": 1
    }, 
    "showaxeslabels": {
      "valType": "boolean", 
      "role": "info", 
      "description": "Sets whether or not this axis is labeled", 
      "dflt": true
    }, 
    "zerolinecolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the line color of the zero line.", 
      "dflt": "#444"
    }, 
    "range": {
      "items": [
        {
          "valType": "number"
        }, 
        {
          "valType": "number"
        }
      ], 
      "valType": "info_array", 
      "role": "info", 
      "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, then you must convert the date to unix time in milliseconds (the number of milliseconds since January 1st, 1970). For example, to set the date range from January 1st 1970 to November 4th, 2013, set the range from 0 to 1380844800000.0"
    }, 
    "categoryarraysrc": {
      "valType": "string", 
      "role": "info", 
      "description": "Sets the source reference on plot.ly for  categoryarray ."
    }, 
    "tickcolor": {
      "valType": "color", 
      "role": "style", 
      "description": "Sets the tick color.", 
      "dflt": "#444"
    }, 
    "exponentformat": {
      "values": [
        "none", 
        "e", 
        "E", 
        "power", 
        "SI", 
        "B"
      ], 
      "valType": "enumerated", 
      "role": "style", 
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.", 
      "dflt": "B"
    }
  }, 
  "aspectratio": {
    "y": {
      "valType": "number", 
      "role": "info", 
      "min": 0
    }, 
    "x": {
      "valType": "number", 
      "role": "info", 
      "min": 0
    }, 
    "z": {
      "valType": "number", 
      "role": "info", 
      "min": 0
    }, 
    "role": "object", 
    "description": "Sets this scene's axis aspectratio."
  }, 
  "hovermode": {
    "values": [
      "closest", 
      false
    ], 
    "valType": "enumerated", 
    "role": "info", 
    "description": "Determines the mode of hover interactions for this scene.", 
    "dflt": "closest"
  }, 
  "_deprecated": {
    "cameraposition": {
      "valType": "info_array", 
      "role": "info", 
      "description": "Obsolete. Use `camera` instead."
    }
  }
}